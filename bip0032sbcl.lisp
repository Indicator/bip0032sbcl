; bip0032sbcl

(defun hexval (h) (read-from-string (format nil "#x~d" h)))

(defun bip0032sbcl-top ()
  (unless (and (= (length sb-ext:*posix-argv*) 2) (equal (cadr sb-ext:*posix-argv*) "lisp"))
    (sb-sys:enable-interrupt sb-unix:sigint #'(lambda (&rest args) (sb-ext:exit :code 1))) ; disallow breaks
    (handler-case
     (progn
       (bip0032sbcl-sub-top)
       (sb-ext:exit :code 0))
     (error (x)
	    (format *error-output* "ERROR: ~d~%" x)
	    (sb-ext:exit :code 2))))
  (loop while t do (format t "* ") (force-output) (print (eval (read))) (terpri)))

(defun path-to-list (d)
  (let ((l (length d))
	(i 0)
	(v nil)
	(r nil))
    (loop while (< i l) do
	  (let ((c (aref d i)))
	    (case c
		  (#\/ (when v (push v r) (setq v nil)))
		  (#\' (if v
			   (progn (push (logior (ash 1 31) v) r) (setq v nil))
			 (progn
			   (format *error-output* "Bad specification of a path")
			   (sb-ext:exit :code 1))))
		  (#\0 (if v (setq v (* v 10)) (setq v 0)))
		  (#\1 (if v (setq v (+ 1 (* v 10))) (setq v 1)))
		  (#\2 (if v (setq v (+ 2 (* v 10))) (setq v 2)))
		  (#\3 (if v (setq v (+ 3 (* v 10))) (setq v 3)))
		  (#\4 (if v (setq v (+ 4 (* v 10))) (setq v 4)))
		  (#\5 (if v (setq v (+ 5 (* v 10))) (setq v 5)))
		  (#\6 (if v (setq v (+ 6 (* v 10))) (setq v 6)))
		  (#\7 (if v (setq v (+ 7 (* v 10))) (setq v 7)))
		  (#\8 (if v (setq v (+ 8 (* v 10))) (setq v 8)))
		  (#\9 (if v (setq v (+ 9 (* v 10))) (setq v 9)))
		  (t
		   (format *error-output* "Bad specification of a path")
		   (sb-ext:exit :code 1))))
	  (incf i))
    (when v (push v r))
    (reverse r)))

(defun ckd-path (k c path)
  (dolist (i (path-to-list path))
    (multiple-value-setq
     (k c)
     (ckd k c i)))
  (values k c))

(defun ckdp-path (x y c path)
  (dolist (i (path-to-list path))
    (multiple-value-setq
     (x y c)
     (ckdp x y c i)))
  (values x y c))

(defun bip0032sbcl-sub-top ()
  (if (> (length sb-ext:*posix-argv*) 1)
      (let ((com (cadr sb-ext:*posix-argv*)))
	(cond ((equal com "lisp") (throw 'exittolisp nil))
	      ((equal com "passwords")
	       (if (= (length sb-ext:*posix-argv*) 7)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (path (nth 4 sb-ext:*posix-argv*))
			 (j (read-from-string (nth 5 sb-ext:*posix-argv*)))
			 (a (read-from-string (nth 6 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (privpass cpass)
                      (ckd-path priv c path)
		      (unless (and privpass cpass)
			(format *error-output* "No passwords are possible for this key.~%")
			(sb-ext:exit :code 1))
		      (loop while (> a 0) do
			    (multiple-value-bind
			     (privj)
			     (ckd privpass cpass j)
			     (when privj
			       (format t "~d~%" (base58 (logand (- (ash 1 95) 1) privj)))
			       (decf a)))
			    (incf j))
		      (format t "~d~%" j)
		      (sb-ext:exit :code 0)))
		 (progn
		   (format *error-output* "bip0032sbclexec passwords <privkeybase58> <chaincodebase58> <path> <startindex> <numpasswords>~%")
		   (sb-ext:exit :code 1))))
	      ((or (equal com "btcaddrs") (equal com "ltcaddrs") (equal com "ftcaddrs"))
	       (if (= (length sb-ext:*posix-argv*) 8)
		   (let ((addrfun (cond ((equal com "btcaddrs") #'btcaddr)
					((equal com "ltcaddrs") #'ltcaddr)
					((equal com "ftcaddrs") #'ftcaddr)))
			 (xpub (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (ypub (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 4 sb-ext:*posix-argv*)))
			 (path (nth 5 sb-ext:*posix-argv*))
			 (j (read-from-string (nth 6 sb-ext:*posix-argv*)))
			 (a (read-from-string (nth 7 sb-ext:*posix-argv*))))
		     (multiple-value-setq (xpub ypub c) (ckdp-path xpub ypub c path))
		     (loop while (> a 0) do
			   (multiple-value-bind
			    (xj yj)
			    (ckdp xpub ypub c j)
			    (when (and xj yj)
			      (format t "~d~%" (funcall addrfun xj yj))
			      (decf a))
			    (incf j)))
		     (format t "~d~%" j)
		     (sb-ext:exit :code 0))
		 (progn
		   (format *error-output* "bip0032sbclexec ~d <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <path> <startindex> <numaddresses>~%" com)
		   (sb-ext:exit :code 1))))
	      ((equal com "keypairs")
	       (if (= (length sb-ext:*posix-argv*) 7)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (path (nth 4 sb-ext:*posix-argv*))
			 (j (read-from-string (nth 5 sb-ext:*posix-argv*)))
			 (a (read-from-string (nth 6 sb-ext:*posix-argv*))))
		     (multiple-value-setq (priv c) (ckd-path priv c path))
		     (loop while (> a 0) do
			   (multiple-value-bind
			    (privj)
			    (ckd priv c j)
			    (when privj
			      (multiple-value-bind
			       (xj yj)
			       (smulp privj xg yg)
			       (when (and xj yj)
				 (format t "~d~%" (base58 privj))
				 (format t "04~64,'0X~64,'0X~%" xj yj)
				 (decf a))))
			    (incf j)))
		     (format t "~d~%" j)
		     (sb-ext:exit :code 0))
		 (progn
		   (format *error-output* "bip0032sbclexec keypairs <privkeybase58> <chaincodebase58> <path> <startindex> <numprivpubkeypairs>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "offsetpub")
	       (let ((fail #'(lambda ()
			       (format *error-output* "bip0032sbclexec offsetpub <offset256bithex> <uncompressedpubkeyhex>~%")
			       (sb-ext:exit :code 1))))
		 (unless (= (length sb-ext:*posix-argv*) 4) (funcall fail))
		 (let ((offset (nth 2 sb-ext:*posix-argv*))
		       (upubhex (nth 3 sb-ext:*posix-argv*))
		       (offsetval 0)
		       (pubx 0)
		       (puby 0))
		   (unless (= (length offset) 64) (funcall fail))
		   (unless (= (length upubhex) 130) (funcall fail))
		   (unless (and (eq (aref upubhex 0) #\0) (eq (aref upubhex 1) #\4)) (funcall fail))
		   (dotimes (j 64) (setq offsetval (logior (ash offsetval 4) (hexval (aref offset j)))))
		   (dotimes (j 64) (setq pubx (logior (ash pubx 4) (hexval (aref upubhex (+ 2 j))))))
		   (dotimes (j 64) (setq puby (logior (ash puby 4) (hexval (aref upubhex (+ 66 j))))))
		   (multiple-value-bind
		    (xj yj)
		    (smulp offsetval pubx puby)
		    (unless (and xj yj)
		      (format *error-output* "This offset is incompatible with this public key.~%")
		      (sb-ext:exit :code 1))
		    (format t "Modified Public Key: 04~64,'0X~64,'0X~%" xj yj)
		    (format t "Corresponding BTC Address: ~d~%" (btcaddr xj yj))))
		 (sb-ext:exit :code 0)))
	      ((equal com "offsetpriv")
	       (let ((fail #'(lambda ()
			       (format *error-output* "bip0032sbclexec offsetpriv <offset256bithex> <privkeybase58>~%")
			       (sb-ext:exit :code 1))))
		 (unless (= (length sb-ext:*posix-argv*) 4) (funcall fail))
		 (let ((offset (nth 2 sb-ext:*posix-argv*))
		       (offsetval 0)
		       (priv (frombase58 (nth 3 sb-ext:*posix-argv*))))
		   (unless (= (length offset) 64) (funcall fail))
		   (dotimes (j 64) (setq offsetval (logior (ash offsetval 4) (hexval (aref offset j)))))
		   (let ((modpriv (mod (* priv offsetval) n)))
		     (when (= modpriv 0)
		       (format *error-output* "This offset is incompatible with this private key.~%")
		       (sb-ext:exit :code 1))
		     (format t "Modified Private Key in BTC WIF: ~d~%" (btcwif modpriv))))
		 (sb-ext:exit :code 0)))
	      ((or (equal com "btcpairs") (equal com "ltcpairs") (equal com "ftcpairs"))
	       (if (= (length sb-ext:*posix-argv*) 7)
		   (let ((addrfun (cond ((equal com "btcpairs") #'btcaddr)
					((equal com "ltcpairs") #'ltcaddr)
					((equal com "ftcpairs") #'ftcaddr)))
			 (wiffun (cond ((equal com "btcpairs") #'btcwif)
					((equal com "ltcpairs") #'ltcwif)
					((equal com "ftcpairs") #'ftcwif)))
			 (priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (path (nth 4 sb-ext:*posix-argv*))
			 (j (read-from-string (nth 5 sb-ext:*posix-argv*)))
			 (a (read-from-string (nth 6 sb-ext:*posix-argv*))))
		     (multiple-value-setq (priv c) (ckd-path priv c path))
		     (loop while (> a 0) do
			   (multiple-value-bind
			    (privj)
			    (ckd priv c j)
			    (when privj
			      (multiple-value-bind
			       (xj yj)
			       (smulp privj xg yg)
			       (when (and xj yj)
				 (format t "~d~%" (funcall wiffun privj))
				 (format t "~d~%" (funcall addrfun xj yj))
				 (decf a))))
			    (incf j)))
		     (format t "~d~%" j)
		     (sb-ext:exit :code 0))
		 (progn
		   (format *error-output* "bip0032sbclexec ~d <privkeybase58> <chaincodebase58> <path> <startindex> <numaddresses>~%" com)
		   (sb-ext:exit :code 1))))
	      ((equal com "pubkey")
	       (if (= (length sb-ext:*posix-argv*) 3)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (xpub ypub)
		      (smulp priv xg yg)
		      (format t "~d~%~d~%" (base58 xpub) (base58 ypub))
		      (sb-ext:exit :code 0)
		      ))
		 (progn
		   (format t "bip0032sbclexec pubkey <privkeybase58>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "master")
	       (if (= (length sb-ext:*posix-argv*) 3)
		   (multiple-value-bind
		    (priv c)
		    (master (nth 2 sb-ext:*posix-argv*))
		    (format t "~d~%" (base58 priv))
		    (format t "~d~%" (base58 c)))
		 (progn
		   (format *error-output* "bip0032sbclexec master <string>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "masterhex")
	       (if (= (length sb-ext:*posix-argv*) 3)
		   (let ((s "")
			 (h (nth 2 sb-ext:*posix-argv*))
			 (b 0))
		     (dotimes (j (length h))
		       (if (oddp j)
			   (setq s (format nil "~d~d" s (code-char (logior (ash b 4) (hexval (aref h j))))))
			 (setq b (hexval (aref h j)))))
		     (when (oddp (length h))
		       (setq s (format nil "~d~d" s (code-char (hexval (ash b 4))))))
		     (multiple-value-bind
		      (priv c)
		      (master s)
		      (format t "~d~%" (base58 priv))
		      (format t "~d~%" (base58 c))))
		 (progn
		   (format *error-output* "bip0032sbclexec masterhex <hexvalue>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "ckdpriv")
	       (if (= (length sb-ext:*posix-argv*) 5)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 4 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (privj cj)
		      (ckd priv c (logior (ash 1 31) j))
		      (if (and privj cj)
			  (format t "~d~%~d~%" (base58 privj) (base58 cj))
			(format *error-output* "INVALID~%"))
		      (sb-ext:exit :code 0)))
		 (progn
		   (format *error-output* "bip0032sbclexec ckdpriv <privkeybase58> <chaincodebase58> <childindex>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "ckd")
	       (if (= (length sb-ext:*posix-argv*) 5)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 4 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (privj cj)
		      (ckd priv c j)
		      (if (and privj cj)
			  (format t "~d~%~d~%" (base58 privj) (base58 cj))
			(format *error-output* "INVALID~%"))
		      (sb-ext:exit :code 0)))
		 (progn
		   (format *error-output* "bip0032sbclexec ckd <privkeybase58> <chaincodebase58> <childindex>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "ckdpub")
	       (if (= (length sb-ext:*posix-argv*) 6)
		   (let ((xpub (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (ypub (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 4 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 5 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (xpubj ypubj cj)
		      (ckdp xpub ypub c j)
		      (if (and xpubj ypubj cj)
			  (format t "~d~%~d~%~d~%" (base58 xpubj) (base58 ypubj) (base58 cj))
			(format *error-output* "INVALID~%"))
		      (sb-ext:exit :code 0)))
		 (progn
		   (format *error-output* "bip0032sbclexec ckdpub <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <childindex>~%")
		   (sb-ext:exit :code 1)))
	       )
	      ((equal com "help")
	       (bip0032sbcl-help)
	       (sb-ext:exit :code 0)
	       )
	      (t
	       (format *error-output* "Unknown command ~d~%" com)
	       (sb-ext:exit :code 1))))
    (progn
      (bip0032sbcl-help)
      (sb-ext:exit :code 0))))

(defun bip0032sbcl-help ()
  (format t "bip0032sbclexec help~%")
  (format t "bip0032sbclexec lisp~%")
  (format t "bip0032sbclexec master <string>~%")
  (format t "bip0032sbclexec masterhex <hexvalue>~%")
  (format t "bip0032sbclexec pubkey <privkeybase58>~%")
  (format t "bip0032sbclexec keypairs <privkeybase58> <chaincodebase58> <path> <startindex> <numprivpubkeypairs>~%")
  (format t "bip0032sbclexec btcaddrs <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <path> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec ltcaddrs <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <path> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec ftcaddrs <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <path> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec btcpairs <privkeybase58> <chaincodebase58> <path> <startindex> <numkeyaddresspairs>~%")
  (format t "bip0032sbclexec ltcpairs <privkeybase58> <chaincodebase58> <path> <startindex> <numkeyaddresspairs>~%")
  (format t "bip0032sbclexec ftcpairs <privkeybase58> <chaincodebase58> <path> <startindex> <numkeyaddresspairs>~%")
  (format t "bip0032sbclexec passwords <privkeybase58> <chaincodebase58> <path> <startindex> <numpasswords>~%")
  (format t "bip0032sbclexec ckdpriv <privkeybase58> <chaincodebase58> <childindex>~%")
  (format t "bip0032sbclexec ckd <privkeybase58> <chaincodebase58> <childindex>~%")
  (format t "bip0032sbclexec ckdpub <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <childindex>~%")
  )

(sb-ext:save-lisp-and-die "bip0032sbclexec" :executable t :toplevel #'bip0032sbcl-top)
