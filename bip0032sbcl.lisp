; bip0032sbcl

(defun hexval (h) (read-from-string (format nil "#x~d" h)))

(defun bip0032sbcl-top ()
  (sb-sys:enable-interrupt sb-unix:sigint #'(lambda (&rest args) (sb-ext:exit :code 1))) ; disallow breaks
  (handler-case
   (bip0032sbcl-sub-top)
   (error (x)
          (format *error-output* "ERROR: ~d~%" x)
	  (sb-ext:exit :code 2))))

(defun bip0032sbcl-sub-top ()
  (if (> (length sb-ext:*posix-argv*) 1)
      (let ((com (cadr sb-ext:*posix-argv*)))
	(cond ((or (equal com "btcaddrs") (equal com "ltcaddrs") (equal com "ftcaddrs"))
	       (if (= (length sb-ext:*posix-argv*) 7)
		   (let ((addrfun (cond ((equal com "btcaddrs") #'btcaddr)
					((equal com "ltcaddrs") #'ltcaddr)
					((equal com "ftcaddrs") #'ftcaddr)))
			 (xpub (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (ypub (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 4 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 5 sb-ext:*posix-argv*)))
			 (a (read-from-string (nth 6 sb-ext:*posix-argv*))))
		     (loop while (> a 0) do
			   (multiple-value-bind
			    (xj yj)
			    (ckdp xpub ypub c j)
			    (when (and xj yj)
			      (format t "~d~%" (funcall addrfun xj yj))
			      (decf a))
			    (incf j)))
		     (format t "~d~%" j)
		     (sb-ext:exit :code 0))
		 (progn
		   (format *error-output* "bip0032sbclexec ~d <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <startindex> <numaddresses>~%" com)
		   (sb-ext:exit :code 1))))
	      ((or (equal com "btcpairs") (equal com "ltcpairs") (equal com "ftcpairs"))
	       (if (= (length sb-ext:*posix-argv*) 6)
		   (let ((addrfun (cond ((equal com "btcpairs") #'btcaddr)
					((equal com "ltcpairs") #'ltcaddr)
					((equal com "ftcpairs") #'ftcaddr)))
			 (wiffun (cond ((equal com "btcpairs") #'btcwif)
					((equal com "ltcpairs") #'ltcwif)
					((equal com "ftcpairs") #'ftcwif)))
			 (priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 4 sb-ext:*posix-argv*)))
			 (a (read-from-string (nth 5 sb-ext:*posix-argv*))))
		     (loop while (> a 0) do
			   (multiple-value-bind
			    (privj)
			    (ckd priv c j)
			    (when privj
			      (multiple-value-bind
			       (xj yj)
			       (smulp privj xg yg)
			       (when (and xj yj)
				 (format t "~d~%" (funcall wiffun privj))
				 (format t "~d~%" (funcall addrfun xj yj))
				 (decf a))))
			    (incf j)))
		     (format t "~d~%" j)
		     (sb-ext:exit :code 0))
		 (progn
		   (format *error-output* "bip0032sbclexec ~d <privkeybase58> <chaincodebase58> <startindex> <numaddresses>~%" com)
		   (sb-ext:exit :code 1))))
	      ((equal com "pubkey")
	       (if (= (length sb-ext:*posix-argv*) 3)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (xpub ypub)
		      (smulp priv xg yg)
		      (format t "~d~%~d~%" (base58 xpub) (base58 ypub))))
		 (progn
		   (format t "bip0032sbclexec pubkey <privkeybase58>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "master")
	       (if (= (length sb-ext:*posix-argv*) 3)
		   (multiple-value-bind
		    (priv c)
		    (master (nth 2 sb-ext:*posix-argv*))
		    (format t "~d~%" (base58 priv))
		    (format t "~d~%" (base58 c)))
		 (progn
		   (format *error-output* "bip0032sbclexec master <string>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "masterhex")
	       (if (= (length sb-ext:*posix-argv*) 3)
		   (let ((s "")
			 (h (nth 2 sb-ext:*posix-argv*))
			 (b 0))
		     (dotimes (j (length h))
		       (if (oddp j)
			   (setq s (format nil "~d~d" s (code-char (logior (ash b 4) (hexval (aref h j))))))
			 (setq b (hexval (aref h j)))))
		     (when (oddp (length h))
		       (setq s (format nil "~d~d" s (code-char (hexval (ash b 4))))))
		     (multiple-value-bind
		      (priv c)
		      (master s)
		      (format t "~d~%" (base58 priv))
		      (format t "~d~%" (base58 c))))
		 (progn
		   (format *error-output* "bip0032sbclexec masterhex <hexvalue>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "ckdpriv")
	       (if (= (length sb-ext:*posix-argv*) 5)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 4 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (privj cj)
		      (ckd priv c (logior (ash 1 31) j))
		      (if (and privj cj)
			  (format t "~d~%~d~%" (base58 privj) (base58 cj))
			(format *error-output* "INVALID~%"))
		      (sb-ext:exit :code 0)))
		 (progn
		   (format *error-output* "bip0032sbclexec ckdpriv <privkeybase58> <chaincodebase58> <childindex>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "ckd")
	       (if (= (length sb-ext:*posix-argv*) 5)
		   (let ((priv (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 4 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (privj cj)
		      (ckd priv c j)
		      (if (and privj cj)
			  (format t "~d~%~d~%" (base58 privj) (base58 cj))
			(format *error-output* "INVALID~%"))
		      (sb-ext:exit :code 0)))
		 (progn
		   (format *error-output* "bip0032sbclexec ckd <privkeybase58> <chaincodebase58> <childindex>~%")
		   (sb-ext:exit :code 1))))
	      ((equal com "ckdpub")
	       (if (= (length sb-ext:*posix-argv*) 6)
		   (let ((xpub (frombase58 (nth 2 sb-ext:*posix-argv*)))
			 (ypub (frombase58 (nth 3 sb-ext:*posix-argv*)))
			 (c (frombase58 (nth 4 sb-ext:*posix-argv*)))
			 (j (read-from-string (nth 5 sb-ext:*posix-argv*))))
		     (multiple-value-bind
		      (xpubj ypubj cj)
		      (ckdp xpub ypub c j)
		      (if (and xpubj ypubj cj)
			  (format t "~d~%~d~%~d~%" (base58 xpubj) (base58 ypubj) (base58 cj))
			(format *error-output* "INVALID~%"))
		      (sb-ext:exit :code 0)))
		 (progn
		   (format *error-output* "bip0032sbclexec ckdpub <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <childindex>~%")
		   (sb-ext:exit :code 1)))
	       )
	      ((equal com "help")
	       (bip0032sbcl-help)
	       (sb-ext:exit :code 0)
	       )
	      (t
	       (format *error-output* "Unknown command ~d~%" com)
	       (sb-ext:exit :code 1))))
    (progn
      (bip0032sbcl-help)
      (sb-ext:exit :code 0))))

(defun bip0032sbcl-help ()
  (format t "bip0032sbclexec help~%")
  (format t "bip0032sbclexec master <string>~%")
  (format t "bip0032sbclexec masterhex <hexvalue>~%")
  (format t "bip0032sbclexec pubkey <privkeybase58>~%")
  (format t "bip0032sbclexec btcaddrs <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec ltcaddrs <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec ftcaddrs <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec btcpairs <privkeybase58> <chaincodebase58> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec ltcpairs <privkeybase58> <chaincodebase58> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec ftcpairs <privkeybase58> <chaincodebase58> <startindex> <numaddresses>~%")
  (format t "bip0032sbclexec ckdpriv <privkeybase58> <chaincodebase58> <childindex>~%")
  (format t "bip0032sbclexec ckd <privkeybase58> <chaincodebase58> <childindex>~%")
  (format t "bip0032sbclexec ckdpub <xpubkeybase58> <ypubkeybase58> <chaincodebase58> <childindex>~%")
  )

(sb-ext:save-lisp-and-die "bip0032sbclexec" :executable t :toplevel #'bip0032sbcl-top)
